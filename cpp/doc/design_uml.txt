@startuml design_uml
skinparam sequenceMessageAlign reverseDirection

frontend -> backend : << start >>

queue "main queue" as q0
backend -> q0 : << produce >>
activate q0 #Gold

q0 -> simulator : << consume >>
deactivate q0
activate simulator #Crimson

queue "data queue" as q1

simulator -> q1 : << produce >>
activate q1 #Gold
participant "data consumer" as d1
q1 -> d1 : << consume >>
deactivate q1
activate d1 #Crimson
d1 -> renderer : << dispatch >>
activate renderer #Crimson
d1 -> analyser : << dispatch >>
deactivate d1
activate analyser #Crimson

queue "render queue" as q2
renderer -> q2 : << produce >>
deactivate renderer
activate q2 #Gold

participant "render collector" as c2
q2 -> c2 : << consume >>
deactivate q2
activate c2
c2 o--> backend : << callback >>
deactivate c2

queue "analysis queue" as q3
analyser -> q3 : << produce >>
deactivate analyser
activate q3 #Gold

participant "analysis collector" as c3
q3 -> c3 : << consume >>
deactivate q3
activate c3
c3 o--> backend : << callback >>
deactivate c3

backend -> frontend : << update >>



deactivate simulator

@enduml
